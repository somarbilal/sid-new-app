# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1THM4iDjW9OXX75ECwky6_rgXYmVUBV4m
"""

import pickle
import streamlit as st
import numpy as np
from streamlit_option_menu import option_menu


# loading the saved models

LogisticRegression = pickle.load(open('LogisticRegression.sav', 'rb'))
scaler = pickle.load(open('scaler.sav', 'rb'))



# sidebar for navigation
with st.sidebar:
    
    selected = option_menu('Parkinson Disease Prediction System',
                          
                          ['LogisticRegression'
                           ],
                          icons=['activity'],
                          default_index=0)
    
    
# Parkinson's disease Prediction Page
if (selected == 'LogisticRegression'):
    
    # page title
    st.title('Parkinson Prediction using LogisticRegression')
    
    
    # getting the input data from the user
    col1, col2, col3 = st.columns(3)
    
    with col1:
        mean_pd	 = st.text_input('mean_pd')
        
    with col2:
        std_pd	= st.text_input('std_pd')
    
    with col3:
        K_1_pd = st.text_input('K_1_pd')
    
    with col1:
        Skewnesscollapse_pd = st.text_input('Skewnesscollapse_pd')
    
    with col2:
        Kurtosis_pd = st.text_input('Kurtosis_pd')
    
    with col3:
        max = st.text_input('max')
    
    with col1:
        min = st.text_input('min')
    
    with col2:
        range_pd = st.text_input('range_pd')

    with col3:
        Q1 = st.text_input('Q1')

    with col1:
        Q3 = st.text_input('Q3')

    with col2:
        Q2 = st.text_input('Q2')

    with col3:
        iqr_dp = st.text_input('iqr_dp')


    
    # code for Prediction
    parkinsons_diagnosis = ''
    
    # creating a button for Prediction    
    if st.button("Parkinson's Test Result"):
        input_data = (mean_pd,	std_pd,	K_1_pd,	Skewnesscollapse_pd,	Kurtosis_pd,	max,	min,	range_pd,	Q1,	Q3,	Q2,	iqr_dp)

        # changing input data to a numpy array
        input_data_as_numpy_array = np.asarray(input_data)

        # reshape the numpy array
        input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)


        # standardize the data
        std_data = scaler.transform(input_data_reshaped)

        prediction = LogisticRegression.predict(std_data)

        prediction_probalities=model.predict_proba(std_data)

        matrix=max(prediction_probalities)
        probability=max(max(prediction_probalities))                      
        

        if (prediction[0] == 0):
           parkinsons_diagnosis=f"The Person is old and does not have Parkinsons Disease\nI am sure by {probability}\nthe matrix pf probability is  {matrix}"
        elif (prediction[0] == 2):
           parkinsons_diagnosis=f"The Person is young and does not have Parkinsons Disease\nI am sure by {probability}\nthe matrix pf probability is  {matrix}"
        else:
           parkinsons_diagnosis=f"The Person has Parkinsons\nI am sure by {probability}\nthe matrix pf probability is  {matrix}"
        
    st.success(parkinsons_diagnosis)
